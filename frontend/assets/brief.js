
/* frontend/assets/brief.js */

jQuery(document).ready(function($) {
    const apiBaseUrl = InnovopediaBrief.apiBaseUrl;
    const $shortcodeRoot = $('#innovopedia-brief-shortcode-root');
    let $overlay, $popup, $briefingContent, $loadingSpinner, $audioPlayer, $feedbackForm, $feedbackMessage;
    let currentBriefingData = null; // Store fetched data for topic filtering

    if ($shortcodeRoot.length === 0) {
        // Shortcode not present, no need to proceed
        return;
    }

    // Create the pill-shaped button
    const $button = $('<button id="innovopedia-brief-button" aria-label="Open your daily briefing"><i class="fas fa-newspaper"></i> Your Briefing</button>');
    $shortcodeRoot.append($button);

    // Create the popup structure and append to body
    const createPopup = () => {
        $overlay = $('<div class="innovopedia-brief-overlay" role="dialog" aria-modal="true" aria-label="Innovopedia Briefing"></div>');
        $popup = $(`
            <div class="innovopedia-brief-popup" tabindex="-1">
                <div class="innovopedia-brief-header">
                    <h2 id="briefing-title">Your Daily Briefing</h2>
                    <button class="innovopedia-brief-close" aria-label="Close briefing"><i class="fas fa-times"></i></button>
                </div>
                <div class="innovopedia-brief-loading">
                    <div class="spinner"></div>
                    <p>Fetching your briefing...</p>
                </div>
                <div class="innovopedia-brief-content" style="display: none;">
                    <div class="innovopedia-brief-greeting"></div>
                    <div class="innovopedia-brief-intro"></div>
                    <div class="innovopedia-brief-topics"></div>
                    <div class="innovopedia-brief-stories"></div>
                    <div class="innovopedia-brief-audio"></div>
                    <div class="innovopedia-brief-feedback-form">
                        <h3>Give Us Feedback</h3>
                        <textarea id="innovopedia-feedback-text" placeholder="What do you think of this briefing? Any questions?"></textarea>
                        <button id="innovopedia-submit-feedback">Submit Feedback</button>
                        <div class="innovopedia-brief-feedback-message"></div>
                    </div>
                    <p class="ai-notice">Content generated by AI. Please verify information independently.</p>
                </div>
            </div>
        `);
        $('body').append($overlay);
        $overlay.append($popup);

        $loadingSpinner = $popup.find('.innovopedia-brief-loading');
        $briefingContent = $popup.find('.innovopedia-brief-content');
        $audioPlayer = $popup.find('.innovopedia-brief-audio');
        $feedbackForm = $popup.find('.innovopedia-brief-feedback-form');
        $feedbackMessage = $feedbackForm.find('.innovopedia-brief-feedback-message');
    };

    createPopup(); // Initialize popup elements

    const openPopup = async () => {
        $overlay.addClass('active');
        $popup.focus(); // Focus the popup for accessibility
        $('body').css('overflow', 'hidden'); // Prevent scrolling of background content

        $loadingSpinner.show();
        $briefingContent.hide();
        $feedbackMessage.empty(); // Clear previous feedback message

        try {
            const response = await fetch(`${apiBaseUrl}/get-briefing-advanced`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            currentBriefingData = await response.json();
            displayBriefing(currentBriefingData);
            $loadingSpinner.hide();
            $briefingContent.show();
        } catch (error) {
            console.error("Error fetching briefing:", error);
            $loadingSpinner.html('<p style="color:red;">Failed to load briefing. Please try again later.</p>');
        }
    };

    const closePopup = () => {
        $overlay.removeClass('active');
        $('body').css('overflow', ''); // Restore scrolling
        $button.focus(); // Return focus to the button
        // Pause and reset audio if playing
        const audioEl = $audioPlayer.find('audio')[0];
        if (audioEl) {
            audioEl.pause();
            audioEl.currentTime = 0;
        }
    };

    const displayBriefing = (data) => {
        const $greeting = $briefingContent.find('.innovopedia-brief-greeting');
        const $intro = $briefingContent.find('.innovopedia-brief-intro');
        const $topicsContainer = $briefingContent.find('.innovopedia-brief-topics');
        const $storiesContainer = $briefingContent.find('.innovopedia-brief-stories');

        $greeting.html(`<h3>${data.greeting}</h3>`);
        $intro.html(`<p>${data.intro}</p>`);

        // Display topics
        $topicsContainer.empty();
        if (data.topics && data.topics.length > 0) {
            $topicsContainer.append($('<button class="innovopedia-brief-topic-button active" data-topic="all">All Topics</button>'));
            data.topics.forEach(topic => {
                $topicsContainer.append($(`<button class="innovopedia-brief-topic-button" data-topic="${topic}">${topic}</button>`));
            });
        }

        // Display all stories initially
        renderStories(data.stories);
    };

    const renderStories = (stories) => {
        const $storiesContainer = $briefingContent.find('.innovopedia-brief-stories');
        $storiesContainer.empty();
        if (stories && stories.length > 0) {
            stories.forEach(story => {
                $storiesContainer.append(`
                    <ul>
                        <li>
                            <div class="story-item">
                                <strong>${story.title}</strong>
                                <p>${story.summary}</p>
                            </div>
                        </li>
                    </ul>
                `);
            });
        } else {
            $storiesContainer.html('<p>No stories available for this selection.</p>');
        }
    };

    // Event Listeners
    $button.on('click', openPopup);
    $overlay.on('click', function(e) {
        if ($(e.target).is($overlay)) { // Only close if clicked on overlay, not popup
            closePopup();
        }
    });
    $popup.on('click', '.innovopedia-brief-close', closePopup);

    $(document).on('keydown', function(e) {
        if (e.key === 'Escape' && $overlay.hasClass('active')) {
            closePopup();
        }
    });

    // Topic filtering
    $briefingContent.on('click', '.innovopedia-brief-topic-button', function() {
        const selectedTopic = $(this).data('topic');
        $briefingContent.find('.innovopedia-brief-topic-button').removeClass('active');
        $(this).addClass('active');

        if (selectedTopic === 'all') {
            renderStories(currentBriefingData.stories);
        } else {
            const filteredStories = currentBriefingData.stories.filter(story =>
                story.topics.includes(selectedTopic)
            );
            renderStories(filteredStories);
        }
    });

    // Audio Playback
    $audioPlayer.on('click', '#play-briefing-audio', async function() {
        const $thisButton = $(this);
        $thisButton.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Loading Audio...');

        try {
            const response = await fetch(`${apiBaseUrl}/get-briefing-audio`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);

            $audioPlayer.html(`
                <audio controls autoplay>
                    <source src="${audioUrl}" type="audio/mpeg">
                    Your browser does not support the audio element.
                </audio>
            `);
        } catch (error) {
            console.error("Error fetching audio:", error);
            $audioPlayer.html('<p style="color:red;">Failed to load audio.</p>');
        } finally {
            $thisButton.prop('disabled', false).html('<i class="fas fa-volume-up"></i> Play Briefing Audio');
        }
    });
    // Add audio button initially
    $audioPlayer.html('<button id="play-briefing-audio"><i class="fas fa-volume-up"></i> Play Briefing Audio</button>');

    // Feedback Form Submission
    $feedbackForm.on('click', '#innovopedia-submit-feedback', async function() {
        const feedbackText = $('#innovopedia-feedback-text').val().trim();
        if (!feedbackText) {
            $feedbackMessage.text('Feedback cannot be empty.').css('color', 'red');
            return;
        }

        $(this).prop('disabled', true).text('Submitting...');
        $feedbackMessage.empty();

        try {
            const response = await fetch(`${apiBaseUrl}/submit-feedback`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ feedback: feedbackText })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            $feedbackMessage.text(result.message || 'Thank you for your feedback!').css('color', '#d4edda');
            $('#innovopedia-feedback-text').val(''); // Clear textarea
        } catch (error) {
            console.error("Error submitting feedback:", error);
            $feedbackMessage.text('Failed to submit feedback. Please try again.').css('color', 'red');
        } finally {
            $(this).prop('disabled', false).text('Submit Feedback');
        }
    });
});
