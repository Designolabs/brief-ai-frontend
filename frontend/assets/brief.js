jQuery(document).ready(function($) {
    const { apiBaseUrl, apiKey, colors, borderRadius } = InnovopediaBrief;
    if (!$('#innovopedia-brief-shortcode-root').length) return;

    // --- HTML Templates ---
    const getPopupHTML = () => `
        <div class="innovopedia-brief-overlay" role="dialog" aria-modal="true" aria-labelledby="briefing-title">
            <div class="innovopedia-brief-popup" tabindex="-1">
                <div class="innovopedia-brief-header">
                    <h2 id="briefing-title">Your Daily Briefing</h2>
                    <button class="innovopedia-brief-close" aria-label="Close briefing">&times;</button>
                </div>
                <div class="innovopedia-brief-content">
                    <div class="innovopedia-brief-loading"><div class="spinner"></div><p>Fetching your briefing...</p></div>
                </div>
                <div class="innovopedia-brief-footer">
                    <div class="innovopedia-brief-audio"></div>
                    <div class="innovopedia-brief-feedback-form"></div>
                    <p class="ai-notice">Content generated by AI. Please verify information independently.</p>
                </div>
            </div>
        </div>`;
    
    const getStoryHTML = (story) => `<div class="story-item"><h3>${story.title}</h3><p>${story.summary}</p></div>`;
    const getExtraStoryHTML = (story) => `<div class="extra-story-item"><h3>${story.title}</h3><p>${story.summary}</p></div>`;
    
    // --- App State & Core Functions ---
    let $popup, $overlay, currentBriefingData = null;

    const init = () => {
        $('#innovopedia-brief-shortcode-root').html('<button id="innovopedia-brief-button"><i class="fas fa-newspaper"></i> Your Briefing</button>');
        $('body').append(getPopupHTML());
        $overlay = $('.innovopedia-brief-overlay');
        $popup = $('.innovopedia-brief-popup');
        applyCustomStyles();
        attachEventListeners();
    };

    const applyCustomStyles = () => {
        $popup.css({
            '--innovopedia-primary-color': colors.primary,
            '--innovopedia-secondary-color': colors.secondary,
            '--innovopedia-border-radius': borderRadius
        });
    };

    const openPopup = async () => {
        $overlay.addClass('active');
        $popup.focus();
        $('body').css('overflow', 'hidden');
        if (currentBriefingData) return; // Don't re-fetch if data exists

        try {
            const response = await fetch(`${apiBaseUrl}/get-briefing-advanced`, { headers: { 'X-API-Key': apiKey } });
            if (!response.ok) throw new Error(`API Error: ${response.statusText}`);
            currentBriefingData = await response.json();
            renderBriefing(currentBriefingData);
        } catch (error) {
            $('.innovopedia-brief-content').html(`<p style="color:red;padding:20px;">${error.message}</p>`);
        }
    };

    const closePopup = () => {
        $overlay.removeClass('active');
        $('body').css('overflow', '');
        const audioEl = $popup.find('audio')[0];
        if (audioEl) audioEl.pause();
    };

    // --- Rendering ---
    const renderBriefing = (data) => {
        const contentHtml = `
            ${data.greeting ? `<h2>${data.greeting}</h2>` : ''}
            ${data.intro ? `<p>${data.intro}</p>` : ''}
            <div class="innovopedia-brief-topics">${renderTopics(data.topics)}</div>
            <div class="innovopedia-brief-stories">${data.stories.map(getStoryHTML).join('')}</div>
            <div class="innovopedia-brief-extras">
                ${data.up_next ? renderExtrasSection('Up Next', data.up_next) : ''}
                ${data.popular_stories ? renderExtrasSection('Popular Stories', data.popular_stories) : ''}
            </div>`;
        $('.innovopedia-brief-content').html(contentHtml);
        renderFooter();
    };

    const renderTopics = (topics) => {
        if (!topics || topics.length === 0) return '';
        const topicButtons = topics.map(topic => `<button class="innovopedia-brief-topic-button" data-topic="${topic}">${topic}</button>`).join('');
        return `<button class="innovopedia-brief-topic-button active" data-topic="all">All Topics</button>${topicButtons}`;
    };

    const renderExtrasSection = (title, stories) => `
        <div class="innovopedia-brief-extras-section">
            <h2>${title}</h2>
            ${stories.map(getExtraStoryHTML).join('')}
        </div>`;

    const renderFooter = () => {
        $('.innovopedia-brief-audio').html('<button class="innovopedia-brief-button-primary" id="play-briefing-audio"><i class="fas fa-volume-up"></i> Play Briefing Audio</button>');
        $('.innovopedia-brief-feedback-form').html(`
            <h3>Give Us Feedback</h3>
            <textarea id="innovopedia-feedback-text" placeholder="What do you think of this briefing? Any questions?"></textarea>
            <button class="innovopedia-brief-button-primary" style="background-color: var(--innovopedia-secondary-color);" id="innovopedia-submit-feedback">Submit Feedback</button>
            <div class="innovopedia-brief-feedback-message"></div>`);
    };

    // --- Event Handling ---
    const attachEventListeners = () => {
        $('#innovopedia-brief-button').on('click', openPopup);
        $popup.on('click', '.innovopedia-brief-close', closePopup);
        $overlay.on('click', (e) => e.target === $overlay[0] && closePopup());
        $(document).on('keydown', (e) => e.key === 'Escape' && $overlay.hasClass('active') && closePopup());

        $popup.on('click', '.innovopedia-brief-topic-button', function() {
            const $this = $(this);
            $this.addClass('active').siblings().removeClass('active');
            const topic = $this.data('topic');
            const filteredStories = topic === 'all'
                ? currentBriefingData.stories
                : currentBriefingData.stories.filter(s => s.topics && s.topics.includes(topic));
            $('.innovopedia-brief-stories').html(filteredStories.map(getStoryHTML).join('') || '<p>No stories for this topic.</p>');
        });

        $popup.on('click', '#play-briefing-audio', async function() {
            const $btn = $(this).prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Loading...');
            try {
                const response = await fetch(`${apiBaseUrl}/get-briefing-audio`, { headers: { 'X-API-Key': apiKey } });
                if (!response.ok) throw new Error('Could not load audio.');
                const audioBlob = await response.blob();
                const audioUrl = URL.createObjectURL(audioBlob);
                $('.innovopedia-brief-audio').html(`<audio controls autoplay src="${audioUrl}"></audio>`);
            } catch (error) {
                $btn.prop('disabled', false).html('<i class="fas fa-volume-up"></i> Play Briefing Audio');
                alert(error.message);
            }
        });

        $popup.on('click', '#innovopedia-submit-feedback', async function() {
            const $btn = $(this).prop('disabled', true);
            const $message = $('.innovopedia-brief-feedback-message');
            const text = $('#innovopedia-feedback-text').val().trim();
            if (!text) return $btn.prop('disabled', false);

            try {
                const response = await fetch(`${apiBaseUrl}/submit-feedback`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'X-API-Key': apiKey },
                    body: JSON.stringify({ feedback: text })
                });
                if (!response.ok) throw new Error('Could not submit feedback.');
                const result = await response.json();
                $message.text(result.message || 'Thank you!').css('color', 'lightgreen');
                $('#innovopedia-feedback-text').val('');
            } catch (error) {
                $message.text(error.message).css('color', 'red');
            } finally {
                setTimeout(() => {
                    $btn.prop('disabled', false);
                    $message.text('').attr('style', '');
                }, 3000);
            }
        });
    };

    init();
});
